<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="kr.spring.board.dao.BoardMapper">
	<!-- 글 쓰기 -->
	<insert id="insertBoard" parameterType="boardVO">
	INSERT INTO spboard (
						 board_num, 
						 category, 
						 title, 
						 content, 
						 filename, 
						 ip,
						 mem_num
				)VALUES (
						 spboard_seq.nextval, 
						 #{category}, 
						 #{title}, 
						 #{content}, 
						 #{filename,jdbcType=VARCHAR},
						 #{ip},
						 #{mem_num}
				)
	</insert>
	
	<!-- 글 갯수 -->
	<!-- sql 태그와 include 태그를 이용해서 SQL문을 재사용 -->
	<sql id="boardSearch">
		<where>
			<if test="category != null and category != ''">
				category = #{category}
			</if>
			<if test="keyword != null and keyword != ''">
				<if test="category != null and category != ''">
					AND
				</if>
				<if test="keyfeild == 1">
					title LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfeild == 2">
					(id LIKE '%' || #{keyword} || '%' OR
					nick_name LIKE '%' || #{keyword} || '%')
				</if>
				<if test="keyfeild == 3">
					content LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfeild == 4">
					(title LIKE '%' || #{keyword} || '%' OR
					content LIKE '%' || #{keyword} || '%')
				</if>
			</if>
		</where>
	</sql>
	
	<sql id="boardOrder">
		<if test="order==1">
			ORDER BY board_num DESC
		</if>
		<if test="order==2">
			ORDER BY hit DESC
		</if>
		<if test="order==3">
			ORDER BY fav_cnt DESC NULLS LAST
		</if>
		<if test="order==4">
			ORDER BY re_cnt DESC NULLS LAST
		</if>
	</sql>
	
	<!-- 게시판 글 총레코드수/검색 레코드수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT COUNT(*)
		FROM spboard JOIN spmember USING (mem_num)
		<include refid="boardSearch"/>
	</select>
	<!-- 게시판 전체 목록/검새 목록 -->
	<!-- 이거 왜 resultType이 boardVO??? List아닌가 -->
	<select id="selectList" parameterType="map" resultType="boardVO">
		SELECT *
		FROM (
			  SELECT a.*, rownum rnum 
			  FROM (
			  		SELECT
			  		<![CDATA[
			  			REPLACE(REPLACE(title,'<','&lt;'),'>','&gt;') title,
			  		]]>
			  		board_num,hit, filename, reg_date, mem_num, id, nick_name, re_cnt, fav_cnt
			  		FROM spboard
			  		LEFT OUTER JOIN(SELECT COUNT(*) re_cnt, board_num FROM spboard_reply GROUP BY board_num) USING (board_num)
			  		LEFT OUTER JOIN(SELECT COUNT(*) fav_cnt, board_num FROM spboard_fav GROUP BY board_num) USING (board_num)
					JOIN spmember USING(mem_num)
		<include refid="boardSearch"/>
		<include refid="boardOrder"/>
		)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 한 건의 게시글 읽기 -->
	<select id="selectBoard" parameterType="long" resultType="boardVO">
		SELECT * 
		FROM spboard JOIN spmember USING (mem_num) 
					 LEFT OUTER JOIN spmember_detail USING (mem_num) 
	    WHERE board_num = #{board_num}
	</select>
	
	<!-- 게시글 조회수 증가 -->
	<update id="updateHit" parameterType="long">
		UPDATE spboard SET hit = hit + 1 
		WHERE board_num = #{board_num}
	</update>
	
	<!-- 게시판 글 수정 -->
	<update id="updateBoard" parameterType="boardVO">
		UPDATE spboard SET
			<if test="filename != null">
				filename = #{filename},
			</if>
			title = #{title},
			content = #{content},
			ip = #{ip},
			modify_date = SYSDATE
		WHERE board_num = #{board_num}
	</update>
	
	<!-- 게시판 글 삭제 -->
	<delete id="deleteBoard" parameterType="long">
		DELETE FROM spboard
				WHERE board_num=#{board_num}
	</delete>
	
	<!-- 파일 삭제 -->
	<update id="deleteFile" parameterType="long">
		UPDATE spboard SET filename = '' 
		WHERE board_num = #{board_num}
	</update>
	
	
	
	
	<!-- 좋아요 조회 -->
	<select id="selectFav" parameterType="boardFavVO">
		SELECT * 
		FROM spboard_fav 
		WHERE board_num = #{board_num} and mem_num = #{mem_num}
	</select>
	
	<!-- 좋아요 갯수 -->
	<select id="selectFavCount" parameterType="long">
		SELECT count(*) 
		FROM spboard_fav 
		WHERE board_num = #{board_num}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="insertFav" parameterType="boardFavVO">
		INSERT INTO spboard_fav(board_num, mem_num)
						VALUES (#{board_num}, #{mem_num})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="deleteFav" parameterType="boardFavVO">
		DELETE FROM spboard_fav
				WHERE mem_num = #{mem_num} AND board_num = #{board_num}
	</delete>
	
	<!-- 부모 글 삭제시 모든 좋아요 삭제 -->
	<delete id="deleteFavByBoardNum" parameterType="long">
		DELETE FROM spboard_fav
				WHERE board_num = #{board_num}
	</delete>
	
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="boardReplyVO">
		INSERT INTO spboard_reply(
			re_num,re_content,re_ip,board_num,mem_num
		)VALUES(
			spreply_seq.nextval,
			#{re_content},
			#{re_ip},
			#{board_num},
			#{mem_num}
		)
	</insert>
	<!-- 댓글 목록 -->
	<select id="selectListReply" parameterType="map" resultType="boardReplyVO">

		SELECT * FROM (SELECT a.*, rownum rnum 
						FROM (SELECT 
								re_num
								<![CDATA[REPLACE(REPLACE(re_content,'<','&lt;'),'>','&gt;')re_content,
								]]>
								re_date,
								re_mdate,
								board_num,
								mem_num,
								id,
								nick_name,
								click_num,
								refav_cnt,
								resp_cnt
								
								FROM spboard_reply 
												   JOIN spmember USING(mem_num) 
											       /* 로그인 한 상태에서 클릭한 사람의 정보 읽기, 로그인하지 않으면 0 전달 */
											       LEFT OUTER JOIN (SELECT re_num,mem_num click_num 
											       					FROM spreply_fav 
											       					WHERE mem_num = #{mem_num}) USING(re_num) 
											       LEFT OUTER JOIN (SELECT re_num,COUNT(*) refav_cnt 
											       					FROM spreply_fav 
											       					GROUP BY re_num) USING (re_num)
											       LEFT OUTER JOIN (SELECT re_num, COUNT(*) resp_cnt 
											       					FROM spboard_response 
											       					GROUP BY re_num) USING (re_num)
											       WHERE board_num=#{board_num}
											       ORDER BY re_num DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	<!-- 게시판 댓글 갯수 가져오기 -->
	<select id="selectRowCountReply" parameterType="map" resultType="integer">
		SELECT COUNT(*) 
		FROM spboard_reply 
		WHERE board_num=#{board_num}
	</select>
	<!-- 댓글 수정,삭제시 작성자 회원번호를 구하기 위해 사용 -->
	<select id="selectReply" parameterType="long" resultType="boardReplyVO">
		SELECT * 
		FROM spboard_reply 
		WHERE re_num=#{re_num}
	</select>
	<!-- 댓글 수정 -->
	<update id="updateReply" parameterType="boardReplyVO">
		UPDATE spboard_reply SET re_content = #{re_content}, 
								 re_ip = #{re_ip}, 
								 re_mdate = SYSDATE 
	    WHERE re_num = #{re_num}
	</update>
	
	
	<delete id="deleteReply" parameterType="long">
		DELETE FROM spboard_reply WHERE re_num=#{re_num}
	</delete>
	<!-- 부모글 삭제시 댓글이 존재하면 부모글 삭제전 댓글 삭제 -->
	<delete id="deleteReplyByBoardNum" parameterType="long">
		DELETE FROM spboard_response 
			   WHERE re_num IN (SELECT re_num FROM spboard_reply
			   								  where board_num = #{board_num})
	</delete>
	<!-- 부모글 삭제시 댓글의 답글이 존재하면 댓글 번호를 구해서 답글 삭제시 사용 -->
	<delete id="selectReNumsByBoard_num" parameterType="long">
		select * from spboard_reply WHERE board_num=#{board_num}
	</delete>
	
	<!-- 답글 등록 -->
	<insert id="insertResponse" parameterType="boardResponseVO">
		INSERT INTO spboard_response(
										te_num,
										te_content,
										te_parent_num,
										te_depth,
										te_ip,
										re_num,
										mem_num
									) VALUES (
										response_seq.nextval,
										#{te_content},
										#{te_parent_num},
										#{te_depth},
										#{te_ip},
										#{re_num},
										#{mem_num}
									)
	</insert>
	<!-- 답글 목록 -->
	<select id="selectListResponse" parameterType="long" resultType="boardResponseVO">
		SELECT 
		    r.te_num,
		    r.te_content,
		    r.mem_num,
		    a.id,
		    a.nick_name,
		    r.te_date,
		    r.teip,
		    r.re_num,
		    r.te_depth,
		    r.te_parent_num,
		    m.id as parent_id,
		    m.nick_name as pnick_name
				FROM spboard_response r JOIN spmember a ON r.mem_num = a.mem_num
										LEFT OUTER JOIN spboard_response s ON r.te_parent_num=s.te_parent_num
										LEFT OUTER JOIN spmember m ON s.mem_num = m.mem_num
										WHERE r.re_num = #{re_num}
										START WITH r.te_depth = 0 CONNECT BY PRIOR r.te_num ORDER SIBLINGS BY r.te_num DESC
	</select>
</mapper>